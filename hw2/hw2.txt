Emily Lakic
CS471 Assignment 2

Problem 1

(1) Using the code, give the complete grammar in BNF form

<main> := <parse>
<parse> := <command>
<command> := <expr>
<expr> := <term> '+' <expr> | <term>
<term> := <factor> '*' <term> | <factor>
<factor> := ('<expr>') | <number>
<number> := <digit> <number> | <digit>
<digit> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

(2) Is the grammar left or right recursive? How does that affect the associativity of plus and mult?

The grammar is right recursive. It affects the associativity of plus and mult as both are right associative, meaning the expression is evaluated from right to left. Multiplication remains having a higher precedence over addition.

Problem 2

Using the grammar you extracted in Problem 1 add two new operators,  exponents, "^",  and minus, "-" , operators to the arith1 language .  Exponent operator, "^", should have the highest precedence and "-" should have the a higher precedence than "+" and lower precedence than "*". but still be able to be overridden using parentheses as defined by the grammar. Both operators should have the same associativity as plus and times.
Give the modified grammar. 

<main> := <parse>
<parse> := <command>
<command> := <expr>
<expr> := <poww> '+' <expr> | <poww>
<poww> := <term> '^' <poww> | <term>
<poww> := <minus> '+' <poww> | <minus>
<minus> := <term> '-' <minus> | <term>
<term> := <factor> '*' <term> | <factor>
<factor> := ('<expr>') | <number>
<number> := <digit> <number> | <digit>
<digit> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

Problem 3

Write the left derivation for the following expressions according to the modified grammar from Problem 2 -- It may help to draw the parse tree first.
1 + 2 - 2
1 + 2 - 3 * 5
2 ^ 5 ^ 2
NOTE: You should show only one step at a time -- as we did in class -- but may jump from number to the actual terminal number.

For example:
number '+' expr
'10' '+' expr 

1 + 2 - 2

<main> <parse>
<command>
<expr>
<minus> + <expr>
<term> + <expr>
<factor> + <expr>
<number> + <expr>
1 + <expr>
1 + <minus>
1 + <term> - <minus>
1 + <factor> - <minus>
1 + <number> - <minus>
1 + 2 - <minus>
1 + 2 - <term>
1 + 2 - <factor>
1 + 2 - <number>
1 + 2 - 2

----------------------

1 + 2 - 3 * 5

<main> <parse>
<command>
<expr>
<minus> - <expr>
<term> + <minus> - <expr>
<factor> + <minus> - <expr>
<number> + <minus> - <expr>
1 + <minus> - <expr>
1 + <term> - <expr> 
1 + <factor> - <expr>
1 + <number> - <expr> 
1 + 2 - <expr>
1 + 2 - <minus>
1 + 2 - <term> * <minus>
1 + 2 - <factor> * <minus>
1 + 2 - <number> * <minus>
1 + 2 - 3 * <minus>
1 + 2 - 3 * <term>
1 + 2 - 3 * <factor>
1 + 2 - 3 * <number>
1 + 2 - 3 * 5

----------------------

2 ^ 5 ^ 2

<main> <parse>
<command>
<expr>
<poww> + <expr>
<term> + <expr>
<factor> + <expr>
<number> + <expr>
2 + <expr>
2 + <poww>
2 + <term> ^ <poww>
2 + <factor> ^ <poww>
2 ^ <number> ^ <poww>
2 ^ 5 ^ <poww>
2 ^ 5 ^ <term>
2 ^ 5 ^ <factor>
2 ^ 5 ^ <number>
2 ^ 5 ^ 2

Problem 4

The arith1.c file contains the modified code.

Problem 5

Examine arith2.c: It contains another implementation of a simple arithmetic calculator. The following will compile and run a few test cases.  

make arith2 
./arith2 
1 + 2 * 3 
./arith2 
1 + 2 + 3

The arith2 language is parsed using a slightly different technique, although it is still considered a recursive-descent parser. Pay careful attention to the way while loops are used to parse, instead of pure recursion. Thinking in terms of EBNF (hint: kleene star) may help determine the difference from the previous grammar.

In particular:
(1) Using the code, give the complete grammar in BNF or EBNF form 

<main> := <parse>
<parse> := <command>
<command> := <expr>
<expr> := <term> {+ <term>}
<term> := <factor> {* <factor>}
<factor> := (<expr>) | <number>
<number> := <digit> { <digit> }*
<digit> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

(2) Is the grammar left or right recursive? How does that affect the associativity of plus and mult? 

The grammar is left recursive. It affects the associativity of plus and mult making it left associative as mult as a higher precedence over plus.

Problem 6

Using the grammar you extracted in Problem 5 add two new operators to the arith2 language. The first, minus, should have higher precedence than plus,but lower precedence than mult. The second, exponent, ^, should have higher precedence than mult, but still be able to be overridden usingparentheses as defined by the grammar. Both operators should have the same associativity as plus and times.

Give the modified grammar.

<main> := <parse>
<parse> := <command>
<command> := <expr>
<expr> := <poww> {+ <poww>}
<poww> := <minus> {+ <minus>}
<minus> := <term> {- <term>}
<term> := <factor> {* <factor>}
<factor> := (<expr>) | <number>
<number> := <digit> { <digit> }*
<digit> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

Problem 7

Write the left derivation for the following expressions according to the modified grammar from Problem 6 -- It may help to draw the parse tree first.

1 + 2 - 2

<main> <parse>
<command>
<expr>
<minus> + <minus>
<term> + <minus>
<factor> + <minus>
<number> + <minus>
1 + <minus>
1 + <term> - <term>
1 + <factor> - <term>
1 + <number> - <term>
1 + 2 - <term>
1 + 2 - <factor>
1 + 2 - <number>
1 + 2 - 2

----------------------

1 + 2 - 3 * 5

<main> <parse>
<command>
<expr>
<minus> - <minus>
<term> + <term> - <min>
<factor> + <term> - <min>
<number> + <term> - <min>
1 + <term> - <min>
1 + <factor> - <minus>
1 + <number> - <minus>
1 + 2 - <minus>
1 + 2 - <term> * <term>
1 + 2 - <factor> * <term>
1 + 2 - <number> * <term>
1 + 2 - 3 * <term>
1 + 2 - 3 * <factor>
1 + 2 - 3 * <number>
1 + 2 - 3 * 5

----------------------

2 ^ 5 ^ 2

<main> <parse>
<command>
<expr>
<poww> ^ <poww>
<term> ^ <poww>
<factor> ^ <poww>
<number> ^ <poww>
2 ^ <poww>
2 ^ <term> ^ <term>
2 ^ <factor> ^ <term>
2 ^ <number> ^ <term>
2 ^ 5 ^ <term>
2 ^ 5 ^ <factor>
2 ^ 5 ^ <number>
2 ^ 5 ^ 2

Problem 8

Modify arith2.c and add the new operators that you defined in Problem 6. Pay careful attention to the pattern between the original grammar and the associated function calls in arith2.c. If you have properly adjusted the grammar, it should be a straightforward modification of the original functions with the additional of a couple new functions for the new operators.

You should pay careful attention to how expressions evaluate; a compile and a correct evaluation of some expressions does not mean you have modified everything correctly. Try the sample cases below. 

The arith2.c file contains the modified code.


Problem 9

Both _Bool and bool are available in the ISO C standard published in 2011.  Briefly explain:
(1) What are they used for?
The Boolean type is a C99 feature. The _Bool type specifier is used to declare a Boolean variable. The token bool is recognized as a keyword in C only when used in a vector declaration context and vector support is enabled.

(2) Why do both exist?
_Bool was not originally in C, but was added in the C Standard afterwards. If it had been called bool, then a large amount of existing code would break, as many programs made their own type alias bool prior. All new language keywords that have been added to the C language since are named with an underscore followed by first letter upper-case as they are reserved for any use, meaning reserved for future versions of the C language. 

(3) Is one better than the other? Why? 

_Bool was introduced to avoid any type name collision with the previously used bool, as many programmers already created their own implementations of it. bool is simply an alias for _Bool and they are thus the same. The C language committee simply had no choice but to pull out a reserved identifier for _Bool, as plenty of code was written that included bool in other shapes and forms. However, header file stdbool.h provides a way a bit more convenient than _Bool, as well as symbols for true and false.

Sources used: https://stackoverflow.com/questions/47821877/why-are-c-booleans-called-bool, https://www.ibm.com/support/knowledgecenter/SSGH3R_16.1.0/com.ibm.xlcpp161.aix.doc/language_ref/boolean_variables.html, https://stackoverflow.com/questions/47374356/why-use-stdbool-h-instead-of-bool, https://embedded.fm/blog/2016/5/3/ew-bools

Problem 10

What are pragmas? Why are they processed by the scanner?  Briefly, if you are a language designer what are the trade offs of providing pragmas in a language?

A pragma is a directive construct that is compiler-specific and is used to turn on or off some features. Language-defined, they give instructions for optimization, listing control, etc. Overall, it provides additional information to the compiler. This information can change compilation details that are not otherwise under the programmer's control. Pragmas are processed by the scanner because like comments pragmas can appear anywhere in the source program.  Allowing them anywhere in the grammar would greatly complicate the parser. From a tradeoff standpoint, pragmas have the ability to change program semantics and thus complicate the program. 

Problem 11

Operator precedence and associativity are often subtle details that are overlooked when using a language (and require careful treatment when implementing a compiler). One way around this issue is to use prefix or postfix notation. This is not as foreign as you think, every function call is in prefix notation: 2 powI 3 is just as valid as + 2 3.
Rewrite the expressions a-d below in prefix notation. Assume the following precedences  and associativities for the operators:

a) w ^ x ^ y - z
w ^ x ^ y - z
w ^ (x ^ y) - z
(w ^ (x ^ y)) - z
((w ^ (x ^ y)) - z)
(^ w (x ^ y) - z)
(^ w ^ xy - z)
Answer: - ^ w ^ xyz

b) w - x ^ y ^ z
w - x ^ (y ^ z)
w - (x ^ (y ^ z))
(w - (x ^ (y ^ z)))
(w - ^ x (y ^ z))
(w - ^ x ^ yz)
Answer: - w ^ x ^ yz

c) w * x * y - z
w * x * (y - z)
(w * x) * (y - z)
((w * x) * (y - z))
* (w * w)(y - z)
Answer: * * wx - yz

d) w + x * y + z
w + (x * y) + z
(w + (x * y)) + z
((w + (x * y)) + z)
((w + * xy) + z)
(+ w * xy + z)
Answer: + + w * xyz

Problem 12

Repeat Problem 11, but use postfix notation instead.

a) ((w ^ (x ^ y)) - z)
((w ^ xy ^) - z)
(wxy ^ ^ - z)
Answer: wxy ^ ^ z -

b) (w - (x ^ (y ^ z)))
(w - (x ^ yz ^))
(w - xyz ^ ^)
Answer: wxyz ^ ^ -

c) ((w * x) * (y - z))
(w * x) (y - z) *
wx * yz - *
Answer: wx * yz - *

d) ((w + (x * y)) + z)
((w + xy *) + z)
(w + xy *) z +
Answer: wxy * + z +

Problem 13

What is the value of ack(1,0) ?
What is the value of ack(0,6) ?

a) ack(1,0) = 2

m = 1, n = 0
ack(m,n) = ack (m-1, 1) if n = 0 and m > 0
m = 0, n = 1
ack(m,n) = n + 1 if m = 0
n = 1, 1 + 1 = 2, thus ack(1,0) = 2

b) ack(0,6) = 7

m = 0, n = 6
ack(m,n) = n + 1 if m = 0
n = 6, 6 + 1 = 7, thus ack(0,6) = 7